import datetime
import aiosmtplib

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, PreCheckoutQuery, ContentType, ChatJoinRequest, LabeledPrice, ChatMemberUpdated

from tgbot.keyboards import reply as keyboards
from tgbot.misc.states import BSS
from tgbot.services import database as db
from email.message import EmailMessage


async def cmd_start(message: Message, state: FSMContext):
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    await set_default(message, state)


async def set_default(message: Message, state: FSMContext):
    await state.finish()
    await message.answer(text='–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ, —á–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –í–∞–º!', reply_markup=keyboards.get_start())


async def send_invoice(product_key: str, message: Message):
    bot = message.bot
    product = await db.get_product(user_id=message.from_user.id, product_key=product_key, bot=bot)
    await bot.send_invoice(
        chat_id=message.from_user.id,
        title=product.title,
        description=product.description,
        payload=product.key,
        provider_token=bot['config'].misc.payment_token,
        currency='rub',
        prices=[LabeledPrice(label=product.title, amount=product.price * 100)],
        photo_url=product.photo_url,
        photo_size=512,
        photo_height=512,
        photo_width=512,
        need_name=product.need_name,
        need_phone_number=product.need_phone_number,
        need_email=product.need_email,
        need_shipping_address=product.need_shipping_address
    )


async def send_pray_schedule(message: Message):
    months = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç',
        '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å',
        '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ]
    today = datetime.date.today()
    await message.answer_photo(
        photo=f'https://dum-spb.ru/wp-content/uploads/2020/11/'
              f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ-–º–æ–ª–∏—Ç–≤-{months[today.month - 1]}-{today.year}.png'
    )


async def send_halal_map(message: Message):
    await message.answer('[–•–∞–ª—è–ª—å–Ω—ã–π –ü–µ—Ç–µ—Ä–±—É—Ä–≥](https://yandex.ru/maps/?um=constructor%3Ae15b576cd4cdd60c6e80f46f5bb4f1236c9112dac78f6f3190646938326fd8d4&source=constructorLink)', parse_mode='Markdown')


# msg.text = –ë—é—Ä–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Å–µ–º–µ–π
async def msg_bss(message: Message):
    keyboard = keyboards.get_amount_selection()
    await message.answer(text="–°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=keyboard)
    await BSS.amount_selection.set()


async def state_module_amount_selection(message: Message, state: FSMContext):
    text = message.text
    match text:
        case '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤—Å—Ç—Ä–µ—á':
            await send_invoice(product_key='full_module_pack', message=message)
        case '–û–¥–∏–Ω –∏–∑ –º–æ–¥—É–ª–µ–π':
            await message.answer('–ö–∞–∫–æ–π –º–æ–¥—É–ª—å –≤–∞–º –Ω—É–∂–µ–Ω?', reply_markup=keyboards.get_specific_module_selection())
            await BSS.next()
        case '<':
            await set_default(message, state)
        case unknown_command:
            await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π!')


# state = specific_module_selection
async def state_specific_module(message: Message):
    text = message.text
    match text:
        case 'üë©‚Äç‚ù§Ô∏è‚Äçüë® –î–æ —Å—É–ø—Ä—É–∂–µ—Å—Ç–≤–æ':
            await send_invoice(product_key='1_module', message=message)
        case 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–Ω—É—Ç—Ä–∏—Å–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è':
            await send_invoice(product_key='2_module', message=message)
        case 'üçÉ –ü–æ—Å—Ç —Å—É–ø—Ä—É–∂–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è':
            await send_invoice(product_key='3_module', message=message)
        case '<':
            await msg_bss(message)
        case unknown_command:
            await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π!')


async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    print('want')
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def process_successful_payment(message: Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await message.answer_photo(
        photo='https://downloader.disk.yandex.ru/preview/c412736322ba9a2e39a6c9d0fcdb224cab098accb2ec800e53778a9b73c3a57a/63154aef/Y5L9Od3ID0A48Ydi6g4hVBHCMnX9bL8U39x1IXZm6BmMuAibb69cjgE4QAl4SO0ewSSl_SapFBU6vX7Hrz8aFg%3D%3D?uid=0&filename=bhf2&disposition=inline&hash=&limit=0&content_type=image%2Fpng&owner_uid=0&tknv=v2&size=1024x1024',
        reply_markup=keyboards.get_start())

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot = message.bot
    config = bot['config']
    chat_id = await db.get_bss_chat(bot=bot)
    user_id = message.from_user.id
    invoice_payload = message.successful_payment.invoice_payload

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    if invoice_payload.endswith('module') or invoice_payload == 'full_module_pack':
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        text = f'–°–∫–æ—Ä–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–º–∏ –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç!'
        await message.answer(text=text)

        # –ü–æ–ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
        await message.answer(text="–ï—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ telegram, "
                                  "–∏–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏—Ç–µ `–Ω–µ—Ç`", parse_mode='Markdown')

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–¥–µ–ª–∞—Ç—å –∫—ç—à–±–µ–∫
        await state.update_data(payment_amount=message.successful_payment.total_amount)

        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–∏—è –¥—Ä—É–≥–∞
        await state.set_state('wait_for_inviter_friend')

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
        link = (await message.bot.create_chat_invite_link(
            chat_id=chat_id, creates_join_request=True, name=str(user_id)
        )).invite_link

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sender = config.misc.sender_email
        pswrd = config.misc.smtp_password
        msg = EmailMessage()
        msg["From"] = sender
        msg["To"] = message.successful_payment.order_info.email
        msg["Subject"] = "–ë—é—Ä–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Å–µ–º–µ–π"
        msg.set_content(
            f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å "–ë—é—Ä–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Å–µ–º–µ–π"! –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {link}'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ—á—Ç—É
        await aiosmtplib.send(msg, hostname="smtp.yandex.ru", port=465, username=sender, password=pswrd, use_tls=True)

    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∫—É–ø–∏–ª –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å, —Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—Å–æ–±—ã–π —Å–ø–∏—Å–æ–∫ –≤ –±–¥
    # –õ—é–¥—è–º –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if invoice_payload == 'full_module_pack':
        await db.add_full_pack_user(user_id=user_id, user_name=message.from_user.first_name, bot=message.bot)

    # –î–æ–±–∞–≤–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–¥
    await db.add_payment(user_id=user_id, product=invoice_payload, bot=message.bot)


async def receive_inviter_friend(message: Message, state: FSMContext):
    data = await state.get_data()
    amount = data['payment_amount'] / 100
    await state.finish()
    if message.text.lower() == '–Ω–µ—Ç':
        await message.answer(text='–•–æ—Ä–æ—à–æ!')
        return
    admins = message.bot['config'].tg_bot.admin_ids
    for admin_id in admins:
        try:
            msg = await message.bot.send_message(chat_id=admin_id,
                                                 text=f"{message.text} –ø—Ä–∏–≥–ª–∞—Å–∏–ª "
                                                      f"{message.from_user.get_mention()}, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª "
                                                      f"{amount} —Ä—É–±–ª–µ–π",
                                                 parse_mode='Markdown')
            await msg.pin()
        except Exception:
            pass
    await message.answer('–Ø –ø–µ—Ä–µ–¥–∞–ª –∞–¥–º–∏–Ω–∞–º!')


async def process_add_member_to_chat(chat_member: ChatJoinRequest):
    chat_id = chat_member.chat.id
    user_id = chat_member.from_user.id
    invite_link = chat_member.invite_link
    if invite_link.name == str(user_id):
        link = invite_link.invite_link
        await chat_member.approve()
        await chat_member.bot.revoke_chat_invite_link(chat_id=chat_id, invite_link=link)
    else:
        await chat_member.decline()


async def my_chat_member(update: ChatMemberUpdated):
    bot = update.bot
    chat_id = update.chat.id
    if not update.old_chat_member.is_chat_member():
        await db.set_bss_chat(chat_id=chat_id, bot=bot)
        await bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–π —á–∞—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π "
                                                     "–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ë—é—Ä–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Å–µ–º–µ–π! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç, "
                                                     "—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ `/set_this_chat_as_main`. –¢–∞–∫–∂–µ "
                                                     "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö "
                                                     "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! :)",
                               parse_mode='Markdown')
    elif update.new_chat_member.is_chat_admin():
        await bot.send_message(chat_id=chat_id, text='–í–∞—É! –¢–µ–ø–µ—Ä—å —è —Ç–æ–∂–µ –∞–¥–º–∏–Ω ü¶∏')


def register_user(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands="start", state='*')
    dp.register_message_handler(msg_bss, Text(equals='‚ù§Ô∏è –ë—é—Ä–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Å–µ–º–µ–π'))
    dp.register_message_handler(send_pray_schedule, Text(equals='üìø –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–ª–∏—Ç–≤'))
    dp.register_message_handler(send_halal_map, Text(equals='üó∫ –•–∞–ª—è–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'))
    dp.register_message_handler(state_module_amount_selection, state=BSS.amount_selection)
    dp.register_message_handler(state_specific_module, state=BSS.specific_module_selection)
    dp.register_message_handler(process_successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT, state='*')
    dp.register_message_handler(receive_inviter_friend, state='wait_for_inviter_friend')
    dp.register_pre_checkout_query_handler(process_pre_checkout_query, state='*')
    dp.register_chat_join_request_handler(process_add_member_to_chat)
    dp.register_my_chat_member_handler(my_chat_member, chat_type=('group', 'supergroup'), state='*')
